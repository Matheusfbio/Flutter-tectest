// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_tectest/test/mocks/mock_http_client.dart.
// Do not manually edit this file.

// Importações com alias para evitar conflito de nomes
import 'dart:async' as i3; // Para Future e operações assíncronas
import 'dart:convert' as i4; // Para codificação (Encoding)
import 'dart:typed_data' as i6; // Para Uint8List usado em leitura de bytes

import 'package:http/http.dart' as i2; // Cliente HTTP original
import 'package:mockito/mockito.dart' as i1; // Mockito para criação de mocks
import 'package:mockito/src/dummies.dart'
    as i5; // Valores dummy usados internamente

// Avisos para ignorar certas regras do analisador Dart (lint)

// Classe Fake que simula uma resposta HTTP normal
class _FakeResponse_0 extends i1.SmartFake implements i2.Response {
  _FakeResponse_0(super.parent, super.parentInvocation);
}

// Classe Fake que simula uma resposta HTTP transmitida (streamed)
class _FakeStreamedResponse_1 extends i1.SmartFake
    implements i2.StreamedResponse {
  _FakeStreamedResponse_1(super.parent, super.parentInvocation);
}

/// Classe mock do `http.Client` que é a implementação do cliente HTTP.
/// Usada para testes para simular chamadas HTTP sem fazer requisições reais.
class MockClient extends i1.Mock implements i2.Client {
  // Construtor: habilita erro quando um método não stubado é chamado
  MockClient() {
    i1.throwOnMissingStub(this);
  }

  // Sobrescreve o método HTTP HEAD
  @override
  i3.Future<i2.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#head, [url], {#headers: headers}),
            // Retorna um Future com FakeResponse para simular retorno
            returnValue: i3.Future<i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(#head, [url], {#headers: headers}),
              ),
            ),
          )
          as i3.Future<i2.Response>);

  // Sobrescreve o método HTTP GET
  @override
  i3.Future<i2.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#get, [url], {#headers: headers}),
            returnValue: i3.Future<i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(#get, [url], {#headers: headers}),
              ),
            ),
          )
          as i3.Future<i2.Response>);

  // Sobrescreve o método HTTP POST
  @override
  i3.Future<i2.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    i4.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: i3.Future<i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #post,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as i3.Future<i2.Response>);

  // Sobrescreve o método HTTP PUT
  @override
  i3.Future<i2.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    i4.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #put,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: i3.Future<i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #put,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as i3.Future<i2.Response>);

  // Sobrescreve o método HTTP PATCH
  @override
  i3.Future<i2.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    i4.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #patch,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: i3.Future<i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #patch,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as i3.Future<i2.Response>);

  // Sobrescreve o método HTTP DELETE
  @override
  i3.Future<i2.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    i4.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: i3.Future<i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #delete,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as i3.Future<i2.Response>);

  // Sobrescreve o método read que retorna o corpo da resposta como String
  @override
  i3.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#read, [url], {#headers: headers}),
            // Retorna um valor dummy de String para evitar erros
            returnValue: i3.Future<String>.value(
              i5.dummyValue<String>(
                this,
                Invocation.method(#read, [url], {#headers: headers}),
              ),
            ),
          )
          as i3.Future<String>);

  // Sobrescreve o método readBytes que retorna o corpo da resposta em bytes
  @override
  i3.Future<i6.Uint8List> readBytes(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#readBytes, [url], {#headers: headers}),
            // Retorna lista vazia de bytes dummy
            returnValue: i3.Future<i6.Uint8List>.value(i6.Uint8List(0)),
          )
          as i3.Future<i6.Uint8List>);

  // Sobrescreve o método send que envia uma requisição HTTP
  @override
  i3.Future<i2.StreamedResponse> send(i2.BaseRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#send, [request]),
            // Retorna uma resposta transmitida fake
            returnValue: i3.Future<i2.StreamedResponse>.value(
              _FakeStreamedResponse_1(
                this,
                Invocation.method(#send, [request]),
              ),
            ),
          )
          as i3.Future<i2.StreamedResponse>);

  // Sobrescreve o método close para fechar o cliente HTTP
  @override
  void close() => super.noSuchMethod(
    Invocation.method(#close, []),
    returnValueForMissingStub: null,
  );
}
